{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Middleware.Inventory"
  },
  "host": "localhost:52520",
  "schemes": [
    "http"
  ],
  "paths": {
    "/Adjustment/PhysicalInventoryChange": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "API used to send inventory quantity changes originating within the Warehouse Management layer to the downstream order and merch systems.",
        "description": "This service is used to handle the following scenarios. <br />1) Untracked sale <br />2) Cycle count <br />3) Gifted <br />4) Destroyed <br /><br />**Action Items** <br />1) BNC orders need to have the export to OMS turned off in order to not double dip into site inventory - Dependent upon OMS order update logic <br />2) **Steve/Jason/Kyle** - Determine fields currently associated with WM inventory changes",
        "operationId": "Inventory_PhysicalInventoryChange",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "adjustment",
            "in": "body",
            "description": "The adjustment",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PhysicalAdjustment"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/Search/AvailableToSell": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Inventory search by site and warehouse.",
        "description": "API used to search for Available To Sell inventory.  \r\n             This service is used to confirm availability prior to processing orders or transfers that are sensitive to availability.  \r\n             It also is used to identify the difference between what is Sellable and what is on-hand from a sales channel \r\n             perspective.",
        "operationId": "Inventory_SearchAvailableToSell",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InventorySearchFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/InventoryQuantity"
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/Order/CreateTransfer": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Execute a PO or Transfer against a specific site/store and location.",
        "description": "Any scenario that requires either an inventory ownership change or a location change \r\n            should create a transfer to execute that change with the Warehouse.  \r\n            Transfers should be used to handle all of the move scenarios currently requested below. \r\n            -Site PO \r\n            -RTV \r\n            -Site to site transfers \r\n            Site to store transfers",
        "operationId": "Inventory_CreateTransfer",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "parameters": [
          {
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransferRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/TransferResponse"
            }
          }
        },
        "deprecated": false
      }
    },
    "/Order/ReceivedOnLocation": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Execute workflow associated with the receipt of an Order into the Warehouse.",
        "description": "This flow is responsible for notification of a receipt of inventory into the warehouse.  \r\n            It is responsible for updating merch with the change in inventory ownership and OMS with the change \r\n            of available inventory.",
        "operationId": "Inventory_ReceivedOnLocation",
        "consumes": [
          "application/json",
          "text/json",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "purchaseOrderReceiptEvent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PurchaseOrderReceiptEvent"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/Order/InventoryStocked": {
      "post": {
        "tags": [
          "Inventory"
        ],
        "summary": "Execute workflow associated with the update of sellable inventory.",
        "description": "",
        "operationId": "Inventory_InventoryStocked",
        "consumes": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml",
          "application/x-www-form-urlencoded"
        ],
        "produces": [],
        "parameters": [
          {
            "name": "stockedQuantities",
            "in": "body",
            "description": "",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductQuantity"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/HealthCheck": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "operationId": "Inventory_HealthCheck",
        "consumes": [],
        "produces": [
          "application/json",
          "text/json",
          "application/xml",
          "text/xml"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/HealthCheckModel"
            }
          }
        },
        "deprecated": false
      }
    }
  },
  "definitions": {
    "PhysicalAdjustment": {
      "type": "object",
      "properties": {
        "ProductQuantities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductQuantity"
          }
        },
        "AdjustmentType": {
          "enum": [
            "UntrackedSale",
            "CycleCount",
            "Gifted",
            "Destroyed"
          ],
          "type": "string"
        }
      }
    },
    "ProductQuantity": {
      "required": [
        "Quantity",
        "UPC"
      ],
      "type": "object",
      "properties": {
        "Quantity": {
          "format": "int32",
          "type": "integer"
        },
        "UPC": {
          "type": "string"
        }
      }
    },
    "InventorySearchFilter": {
      "type": "object",
      "properties": {
        "SiteIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "LocationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Styles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Sizes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "Widths": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "UPCs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InventoryQuantity": {
      "required": [
        "StoreId",
        "LocationId",
        "Product",
        "QuantityOnHand",
        "QuantityAvailableToSell"
      ],
      "type": "object",
      "properties": {
        "StoreId": {
          "type": "string"
        },
        "LocationId": {
          "type": "string"
        },
        "Product": {
          "$ref": "#/definitions/Product"
        },
        "QuantityOnHand": {
          "format": "int32",
          "type": "integer"
        },
        "QuantityAvailableToSell": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "Product": {
      "required": [
        "UPC"
      ],
      "type": "object",
      "properties": {
        "UPC": {
          "type": "string"
        }
      }
    },
    "TransferRequest": {
      "required": [
        "TransferType",
        "ProductsToTransfer",
        "FromStoreId",
        "ToStoreId",
        "FromLocation",
        "ToLocation"
      ],
      "type": "object",
      "properties": {
        "TransferType": {
          "enum": [
            "PurchaseOrder",
            "ReturnToVendor"
          ],
          "type": "string"
        },
        "ProductsToTransfer": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductQuantity"
          }
        },
        "FromStoreId": {
          "type": "string"
        },
        "ToStoreId": {
          "type": "string"
        },
        "FromLocation": {
          "$ref": "#/definitions/Location"
        },
        "ToLocation": {
          "$ref": "#/definitions/Location"
        }
      }
    },
    "Location": {
      "type": "object",
      "properties": {
        "LocationName": {
          "type": "string"
        },
        "Address": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "Address": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Line1": {
          "type": "string"
        },
        "Line2": {
          "type": "string"
        },
        "City": {
          "type": "string"
        },
        "State": {
          "type": "string"
        },
        "ZipCode": {
          "type": "string"
        },
        "Country": {
          "type": "string"
        }
      }
    },
    "TransferResponse": {
      "required": [
        "QuantitiesTransferred"
      ],
      "type": "object",
      "properties": {
        "QuantitiesTransferred": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductQuantity"
          }
        }
      }
    },
    "PurchaseOrderReceiptEvent": {
      "type": "object",
      "properties": {
        "PurchaseOrderNumber": {
          "type": "string"
        },
        "ReceiptDateTime": {
          "format": "date-time",
          "type": "string"
        },
        "ReceiptList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductQuantity"
          }
        }
      }
    },
    "HealthCheckModel": {
      "type": "object",
      "properties": {
        "Components": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentCheckModel"
          }
        },
        "Running": {
          "type": "boolean"
        },
        "Version": {
          "type": "string"
        }
      }
    },
    "ComponentCheckModel": {
      "type": "object",
      "properties": {
        "ComponentName": {
          "type": "string"
        },
        "Status": {
          "enum": [
            "Running",
            "Down",
            "AccessDenied",
            "Error"
          ],
          "type": "string"
        },
        "Message": {
          "type": "string"
        }
      }
    }
  }
}